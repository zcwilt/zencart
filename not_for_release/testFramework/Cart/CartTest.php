<?php
/**
 * @copyright Copyright 2003-2020 Zen Cart Development Team
 * @license http://www.zen-cart.com/license/2_0.txt GNU Public License V2.0
 */

namespace Tests\Cart;

use App\Models\Basket;
use App\Models\BasketAttribute;
use App\Models\BasketProduct;
use Tests\Support\zcDatabaseTestCase;
use Zencart\Cart\Cart;

class CartTest extends zcDatabaseTestCase
{
    public function setUp(): void
    {
        global $zco_notifier;
        if (!defined('PRODUCTS_OPTIONS_VALUES_TEXT_ID')) {
            define('PRODUCTS_OPTIONS_VALUES_TEXT_ID', 1);
        }
        if (!defined('PRODUCTS_OPTIONS_TYPE_READONLY_IGNORED')) {
            define('PRODUCTS_OPTIONS_TYPE_READONLY_IGNORED', 1);
        }
        if (!defined('TOPMOST_CATEGORY_PARENT_ID')) {
            define('TOPMOST_CATEGORY_PARENT_ID', 0);
        }
        if (!defined('ERROR_PRODUCT_ATTRIBUTES')) {
            define('ERROR_PRODUCT_ATTRIBUTES', '');
        }
        if (!defined('ERROR_PRODUCT_STATUS_SHOPPING_CART_ATTRIBUTES')) {
            define('ERROR_PRODUCT_STATUS_SHOPPING_CART_ATTRIBUTES', '');
        }
        require ROOTCWD . 'includes/functions/password_funcs.php';
        require ROOTCWD . 'includes/functions/functions_general_shared.php';
        require ROOTCWD . 'includes/functions/functions_attributes.php';
        require ROOTCWD . 'includes/functions/functions_products.php';
        require ROOTCWD . 'includes/functions/functions_strings.php';
        require ROOTCWD . 'includes/functions/functions_prices.php';
        require ROOTCWD . 'includes/functions/functions_customers.php';
        require ROOTCWD . 'includes/functions/functions_categories.php';
        require ROOTCWD . 'includes/functions/database.php';
        require ROOTCWD . 'includes/functions/html_output.php';
        require ROOTCWD . 'includes/functions/zen_define_default.php';
        require ROOTCWD . 'includes/classes/cache.php';
        require_once ROOTCWD . 'includes/classes/currencies.php';
        $GLOBALS['zc_cache'] = new \Cache;
        $GLOBALS['currencies'] = $this->getMockBuilder('currencies')
            ->disableOriginalConstructor()
            ->getMock();
        $GLOBALS['currencies']->method('get_decimal_places')->willReturn(2);

        $zco_notifier = new \notifier();

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /** @test */
    public function it_tests_instantiation_no_customer()
    {
        session_start();
        $cart = new Cart();
        $this->assertInstanceOf(Cart::class, $cart);
        $this->assertEquals('guest', $cart->getCartType());
    }
    /** @test */
    public function it_tests_instantiation_for_customer()
    {
        session_start();
        $_SESSION['customer_id'] = 1;
        $cart = new Cart();
        $this->assertInstanceOf(Cart::class, $cart);
        $this->assertEquals('customer', $cart->getCartType());
    }

    /** @test */
    public function it_resets_a_cart_and_basket_database()
    {
        session_start();
        $_SESSION['customer_id'] = 1;
        $cart = new Cart();
        $cart->reset(true);
        $baskets = Basket::all()->count();
        $this->assertEquals(0, $baskets);
        $basketProducts = BasketProduct::all()->count();
        $this->assertEquals(0, $basketProducts);
        $basketAttributes = BasketAttribute::all()->count();
        $this->assertEquals(0, $basketAttributes);
    }
    /** @test */
    public function it_restores_the_cart_contents()
    {
        session_start();
        $_SESSION['customer_id'] = 1;
        $cart = new Cart();
        $cart->restoreContents();
        $basket = $cart->getCurrentBasket()->with(['basketProducts'])->first();
        $this->assertInstanceOf(Basket::class, $basket);
        $basketProducts = $basket->basketProducts;
        $this->assertCount(2, $basketProducts);
        $this->assertCount(1, $basketProducts[0]->basketAttributes);

    }

    /** @test */
    public function it_adds_a_product_to_cart_no_attributes()
    {
        session_start();
        $_SESSION['customer_id'] = 1;
        $_SESSION['languages_id'] = 1;
        $_SESSION['currency'] = 'USD';
        $cart = new Cart();
        $cart->addToCart(14);
        $products = BasketProduct::all();
        $this->assertCount(3, $products);
        $products = $cart->getProducts(true);
        $this->assertCount(3, $products);
    }

    /** @test */
    public function it_adds_a_product_to_cart_updates_quantity()
    {
        session_start();
        $_SESSION['customer_id'] = 1;
        $_SESSION['languages_id'] = 1;
        $_SESSION['currency'] = 'USD';
        $cart = new Cart();
        $cart->addToCart(14, 10);
        $products = $cart->getProducts(true);
        $this->assertCount(3, $products);
        $this->assertEquals(10, $products[2]['quantity']);
    }

    /** @test */
    public function it_adds_an_existing_product_to_cart()
    {
        session_start();
        $_SESSION['customer_id'] = 1;
        $_SESSION['languages_id'] = 1;
        $_SESSION['currency'] = 'USD';
        $cart = new Cart();
        $cart->addToCart(1);
        $products = $cart->getProducts(true);
        $this->assertCount(2, $products);
        $this->assertEquals(1, $products[0]['quantity']);
    }

    /** @test */
    public function it_adds_an_existing_product_to_cart_with_quantity()
    {
        session_start();
        $_SESSION['customer_id'] = 1;
        $_SESSION['languages_id'] = 1;
        $_SESSION['currency'] = 'USD';
        $cart = new Cart();
        $cart->addToCart(1, 5);
        $products = $cart->getProducts(true);
        $this->assertCount(2, $products);
        $this->assertEquals(5, $products[0]['quantity']);
    }

    /** @test */
    public function it_adds_a_product_to_cart_with_attributes()
    {
        session_start();
        $_SESSION['customer_id'] = 1;
        $_SESSION['languages_id'] = 1;
        $_SESSION['currency'] = 'USD';
        $cart = new Cart();
        $cart->addToCart(26, 1, [3 =>8]);
        $products = BasketProduct::all();
        $this->assertCount(3, $products);
        $attributes2 = $products[2]->basketAttributes;
        $this->assertCount(1, $attributes2);
        $this->assertEquals(1, $products[2]['quantity']);
        $cart->addToCart(26, 2, [3 =>8]);
        $products = BasketProduct::all();
        $this->assertCount(3, $products);
        $attributes2 = $products[2]->basketAttributes;
        $this->assertCount(1, $attributes2);
        $this->assertEquals(2, $products[2]['quantity']);
        $cart->addToCart(26, 5, [3 =>9]);
        $products = BasketProduct::all();
        $this->assertCount(4, $products);
        $attributes2 = $products[3]->basketAttributes;
        $this->assertCount(1, $attributes2);
        $this->assertEquals(5, $products[3]['quantity']);

        $cart->addToCart(34, 1, [13 =>[34,35,36]]);
        $products = BasketProduct::all();
        $this->assertCount(5, $products);
        $attributes2 = $products[4]->basketAttributes;
        $this->assertCount(3, $attributes2);
        $this->assertEquals(1, $products[4]['quantity']);
    }

    /** @test */
    public function it_adds_a_product_to_cart_with_broken_quantity()
    {
        session_start();
        $_SESSION['customer_id'] = 1;
        $_SESSION['languages_id'] = 1;
        $_SESSION['currency'] = 'USD';
        $cart = new Cart();
        $basket = $cart->getCurrentBasket();
        BasketProduct::where('basket_id', $basket->id)->delete();
        $this->runCustomSeeder('SimpleBasketSeederBrokenQuantity');
        $cart->addToCart(1);
        $products = BasketProduct::all();
        $this->assertCount(2, $products);
        $cart->addToCart(1, -1);
        $products = BasketProduct::all();
        $this->assertCount(2, $products);
    }

    /** @test */
    public function it_tests_count_contents()
    {
        session_start();
        $_SESSION['customer_id'] = 1;
        $cart = new Cart();
        $count = $cart->countContents();
        $this->assertEquals(1100, $count);
    }

    /** @test */
    public function it_tests_get_products_and_checks_valid_cart()
    {
        session_start();
        $_SESSION['customer_id'] = 1;
        $_SESSION['languages_id'] = 1;
        $_SESSION['currency'] = 'USD';
        $cart = new Cart();
        $products = $cart->getProducts(true);
        $this->assertCount(2,$products);
        $this->assertCount(1, $products[0]['attributes']);
        $this->assertCount(0, $products[1]['attributes']);
    }
    /** @test */
    public function it_tests_get_products_and_doesnt_check_valid_cart()
    {
        session_start();
        $_SESSION['customer_id'] = 1;
        $_SESSION['languages_id'] = 1;
        $_SESSION['currency'] = 'USD';
        $cart = new Cart();
        $products = $cart->getProducts();
        $this->assertCount(2,$products);
        $this->assertCount(1, $products[0]['attributes']);
        $this->assertCount(0, $products[1]['attributes']);
    }
}
